//This is the old code for it, when it was not as a seperate function but in Program.cs

                                            ==================CODE PART====================

if (line.StartsWith($"Ping("))
{
    bool foundUsing = false;
    string[] someLINEs = null;
    if (textArray == null && fileloc != null) someLINEs = File.ReadAllLines(fileloc);
    else if (textArray != null && fileloc == null) someLINEs = textArray;
    foreach (string x in someLINEs)
    {
        if (x.StartsWith("using"))
        {
            if (x == "using Network;")
            {
                foundUsing = true;
                break;
            }
        }
        if (x == line)
        {
            break;
        }
    }
    if (foundUsing == false)
    {
        Console.ForegroundColor = ConsoleColor.Red;
        Console.WriteLine($"ERROR; The Using 'Network' wasnt referenced to use 'Ping' without its reference  (Use Network.Ping({quotes}*Website*{quotes}) to fix this error :)");
        break;
    }
}
else if (line.StartsWith($"Network.Ping(")) { }
string line_ = line;
line_ = line_.TrimStart();

if (line.StartsWith($"Network.Ping("))
    line_ = line_.Substring(13);
else if (line.StartsWith($"Ping("))
    line_ = line_.Substring(5);

line_ = line_.Substring(0, line_.Length - 2);
string textToPrint = line_;
if (textToPrint.StartsWith('"'.ToString()) && textToPrint.EndsWith('"'.ToString()))
{
    var contentInFile = textToPrint.Replace('"'.ToString(), "");
    try
    {
        try
        {
            Ping ping = new Ping();
            PingReply reply = ping.Send(contentInFile, 1500);
            if (reply != null)
            {
                Console.WriteLine("\nStatus;\n   " + reply.Status + "\nTime;\n   " + reply.RoundtripTime + "\nAddress;\n   " + reply.Address);
            }
        }
        catch (Exception e)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("ERROR; Couldn't Ping Address due to an error");
            Console.WriteLine("Extra Info is below;\n\n" + e);
            Console.ForegroundColor = ConsoleColor.White;
        }
    }
    catch (Exception e)
    {
        Console.ForegroundColor = ConsoleColor.Red;
        Console.WriteLine("\nERROR; Can't Read File at the specified location");
        Console.WriteLine("Extra Info is below;\n\n" + e);
        Console.ForegroundColor = ConsoleColor.White;
    }
}
else if (Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + @$"\EASY14_Variables_TEMP").Length != 0)
{
    string[] files = Directory.GetFiles(Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + @$"\EASY14_Variables_TEMP");
    foreach (string file in files)
    {
        if (file.Substring(file.LastIndexOf(@"\")).Replace(@"\", "").Replace(".txt", "") == textToPrint.Replace(".txt", ""))
        {
            try
            {
                Ping ping = new Ping();
                PingReply reply = ping.Send(file, 1500);
                if (reply != null)
                {
                    Console.WriteLine("Status;\n" + reply.Status + "\n Time;\n" + reply.RoundtripTime + "\n Address;\n" + reply.Address);
                }
            }
            catch (Exception e)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("ERROR; Couldn't Ping Address due to an error");
                Console.WriteLine("Extra Info is below;\n\n" + e);
                Console.ForegroundColor = ConsoleColor.White;
            }
            break;
        }
    }
}